---
import type { Page } from 'astro';
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostPreview from '../../components/PostPreview.astro';

export async function getStaticPaths({ paginate }) {
  const posts = await getCollection('posts', ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  return paginate(posts, { pageSize: 4 });
}

// All paginated data is passed on the "page" prop
type Props = { page: Page<CollectionEntry<'posts'>> };
const { page } = Astro.props;
const posts = page.data;
const pageTitle = 'Blog';
---

<BaseLayout pageTitle={pageTitle}>
  <h1>Blog Posts</h1>
  <div>
    {
      posts.map(post => (
        <>
          <PostPreview url={'/posts/' + post.slug} data={post.data} />
        </>
      ))
    }
  </div>

  <nav aria-label="Pagination">
    {
      page.url.prev && (
        <a
          href={page.url.prev}
          aria-label={`Go to page ${page.currentPage - 1} of ${page.lastPage}`}
        >
          prev
        </a>
      )
    }
    <span aria-current="page">Page {page.currentPage} of {page.lastPage}</span>
    {
      page.url.next && (
        <a
          href={page.url.next}
          aria-label={`Go to page ${page.currentPage + 1} of ${page.lastPage}`}
        >
          Next
        </a>
      )
    }
  </nav>
</BaseLayout>
